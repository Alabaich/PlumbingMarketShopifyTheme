{%- comment -%}
  Contractor Detail Extended Section
  - Reads a contractor ID from the URL (e.g. ?cid=...)
  - Fetches that contractor’s data from Firestore (including name, location, phone, image, coverImageUrl, description, recommended, emergencyServices, and comments)
  - Displays contractor details with:
      • Cover image (if available)
      • Main image (or placeholder)
      • Name, location and phone
      • Overall rating (computed from comment ratings) with total comments count
      • Badges for “Recommended by Plumbing Market” and “Emergency Services” (if applicable)
      • Contractor description
      • Comments list and a form to submit new comments
{%- endcomment -%}

<script src="https://www.google.com/recaptcha/api.js"></script>

<style>
  /* Basic styling for the contractor detail page */
  #contractor-detail {
    width: 100%;
    margin: 0 auto;
    padding: 40px 20px;
    text-align: center;
  }
  #contractor-detail h1 {
    font-size: 28px;
    margin-bottom: 10px;
  }
  #contractor-cover {
    width: 100%;
    height: auto;
    display: none;
    margin-bottom: 20px;
    border-radius: 5px;
    object-fit: cover;
  }

  .headerBlockForContractor{
    display: flex;
    justify content: start;
    align-items: center;
    gap:15px;
  }

  .headerBlockForContractor *{
  margin: 0 !important;
  }

  #contractor-detail  .headerBlockForContractor img#contractor-image{
  width: 100px;
  height: 100px !important;
  border-radius: 50%;
  object-fit: cover;
  }

  /* Badge styling */
  .badge {
    display: inline-block;
    padding: 2px 6px;
    font-size: 12px;
    color: #fff;
    border-radius: 12px;
    margin: 0 5px;
  }
  .badge.recommended {
    background-color: #eff6ff;
    color: #1e40af;
  }
  .badge.emergency {
    background-color: #fef2f2;
    color: #991b1b;
  }
  /* Comments section styling */
  #contractor-comments {
    text-align: left;
    margin-bottom: 30px;
  }
  .comment-item {
    border-bottom: 1px solid #ddd;
    padding: 10px 0;
  }
  .comment-item p {
    margin: 5px 0;
  }
  /* New Comment Header styling */
  .comment-header {
    display: flex;
    justify-content: space-between;
    width: 100%;
    align-items: center;
    margin-bottom: 5px;
  }
  .comment-user {
    text-align: left;
    font-size: 14px;
  }
  .comment-rating {
    text-align: right;
  }
  .comment-body {
    text-align: left;
    font-size: 14px;
  }
  /* Comment form styling */
  #comment-form {
    max-width: 600px;
    margin: 0 auto;
    text-align: left;
  }
  #comment-form input,
  #comment-form textarea {
    width: 100%;
    padding: 8px;
    margin-bottom: 10px;
    font-size: 14px;
  }
  #comment-form button {
    padding: 10px 20px;
    font-size: 14px;
    cursor: pointer;
  }
  #comment-error {
    color: red;
    margin-top: 10px;
  }
  /* Interactive star rating widget styling */
  #comment-rating-widget {
    display: inline-block;
    cursor: pointer;
  }
  #comment-rating-widget svg {
    width: 24px;
    height: 24px;
    vertical-align: middle;
    margin-right: 2px;
    fill: none;
    stroke: #f39c12;
    stroke-width: 2;
  }
  #comment-rating-widget svg.filled {
    fill: #f39c12;
    stroke: #f39c12;
  }
  
  .star-rating {
    display: flex;
    justify-content: end;
    flex-direction: row;
    gap: 2px;
    height: 16px;
  }

  #contractor-detail img#contractor-cover{
  width: 100%;
    max-height: 300px;
    object-fit: cover;
}

#contractor-badges{
display: flex !important;
justify-content: start;
align-items: start;
gap: 15px;}
.titleAndBadges{
  display: flex;
  flex-direction: column;
  gap: 10px;
  justify-content: start;
  align-items: start;
}
.headerOutter{
display: flex;
justify-content: space-between;
align-items: center;
gap: 15px;
margin-bottom: 25px;
}
#contractor-info{
display: flex;
justify-content: start;
align-items: start;
gap: 25px;
margin-bottom: 25px;}
#contractor-info *{
margin-bottom: 0 !important;}

#contractor-description p{
text-align: left;}


  @media screen and (max-width: 600px){
    .headerOutter, .headerBlockForContractor{
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

  .star-rating{
    justify-content: center;
  }
    
  }
</style>

<div id=  "contractor-detail">
  <!-- Cover image (new element) -->
  <img id="contractor-cover" src="" alt="Contractor Cover Image" width="100%" height="auto">
  <div class="headerOutter">
    <div class="headerBlockForContractor">
      <img id="contractor-image" src="" alt="Contractor Image" style="display:none;" width="100px" height="100px">
      <div class="titleAndBadges">
        <h1 id="contractor-name">Loading contractor...</h1>
        <div id="contractor-badges" style="display:none;"></div>
        <!-- Rating: stars plus overall rating and total comments -->
      </div>
  
    </div>
    
    <div id="contractor-rating"></div>
  </div>


  <div id="contractor-info"></div>
  <!-- Description -->
  <div id="contractor-description"></div>
  <!-- Badges container -->


  <hr>
  <h2>Comments</h2>
  <div id="contractor-comments">
    <p>Loading comments...</p>
  </div>
  <h3>Leave a Comment</h3>
  <form id="comment-form">
    <div id="comment-rating-widget"></div>
    <input type="text" id="comment-name" placeholder="Your name" required>
    <textarea id="comment-text" placeholder="Your comment" required></textarea>
    <!-- Interactive Star Rating Widget -->

    <!-- Hidden input to store the rating value -->
    <input type="hidden" id="comment-rating" value="" required>
    <div class="g-recaptcha" data-sitekey="6Lf5duoqAAAAAGipc0CE4YA_TEGDUb2_1joOsa2F"></div>
    <button type="submit">Submit Comment</button>
  </form>
  <div id="comment-error"></div>
</div>

<!-- Include Firebase SDK (modular v9) -->
<script type="module">

if (document.hasStorageAccess) {
  document.requestStorageAccess()
    .then(() => {
      console.log("Storage access granted.");
      // Now Firestore writes should work
    })
    .catch(() => {
      console.warn("Storage access denied.");
    });
}

  import { initializeApp } from "https://www.gstatic.com/firebasejs/9.17.1/firebase-app.js";
  import { getFirestore, doc, getDoc, updateDoc, arrayUnion } from "https://www.gstatic.com/firebasejs/9.17.1/firebase-firestore.js";
  
  // Firebase configuration using your real credentials
  const firebaseConfig = {
    apiKey: "AIzaSyCa4NKlrWF5bcDvFoBTgte3fapVfVh4GMQ",
    authDomain: "plumbingmarket-68e8b.firebaseapp.com",
    projectId: "plumbingmarket-68e8b",
    storageBucket: "plumbingmarket-68e8b.firebasestorage.app",
    messagingSenderId: "99062718040",
    appId: "1:99062718040:web:3630736e55023aa1b4f42d",
    measurementId: "G-9C5CVV662G"
  };
  
  const app = initializeApp(firebaseConfig);
  const db = getFirestore(app);
  
  // Helper to get URL query parameter
  function getQueryParam(param) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(param);
  }
  
  // Get contractor ID from ?cid=...
  const contractorId = getQueryParam('cid');
  
  // DOM Elements
  const nameEl = document.getElementById('contractor-name');
  const infoEl = document.getElementById('contractor-info');
  const descriptionEl = document.getElementById('contractor-description');
  const badgesEl = document.getElementById('contractor-badges');
  const imageEl = document.getElementById('contractor-image');
  const coverEl = document.getElementById('contractor-cover');
  const ratingEl = document.getElementById('contractor-rating');
  const commentsEl = document.getElementById('contractor-comments');
  const commentForm = document.getElementById('comment-form');
  const commentNameInput = document.getElementById('comment-name');
  const commentTextInput = document.getElementById('comment-text');
  const commentRatingInput = document.getElementById('comment-rating'); // hidden field
  const commentErrorEl = document.getElementById('comment-error');
  const ratingWidgetEl = document.getElementById('comment-rating-widget');
  
  // Helper: Compute average rating from comments that have a valid rating
  function computeAverageCommentRating(comments) {
    if (!comments || comments.length === 0) return null;
    const validRatings = comments.filter(c => c.rating && !isNaN(c.rating));
    if (validRatings.length === 0) return null;
    const total = validRatings.reduce((sum, c) => sum + c.rating, 0);
    return (total / validRatings.length).toFixed(1);
  }
  
  async function loadContractor() {
    if (!contractorId) {
      document.getElementById('contractor-detail').innerHTML = '<p class="no-contractor">No contractor specified.</p>';
      return;
    }
    try {
      const docRef = doc(db, "contractors", contractorId);
      const snapshot = await getDoc(docRef);
      if (snapshot.exists()) {
        const data = snapshot.data();
        // Display contractor name
        nameEl.textContent = data.name || "Unnamed Contractor";
        
        // Display cover image if available
        if (data.coverImageUrl) {
          coverEl.src = data.coverImageUrl;
          coverEl.style.display = "block";
        } else {
          coverEl.style.display = "none";
        }
  
        // Display basic info (location and phone)
        infoEl.innerHTML = `
          <p><strong>Location:</strong> ${data.location || "N/A"}</p>
          <p><strong>Phone:</strong> ${data.phone ? `<a href="tel:${data.phone}">${data.phone}</a>` : "N/A"}</p>
        `;
  
        // Show contractor main image (or placeholder)
        if (data.image) {
          imageEl.src = data.image;
        } else {
          imageEl.src = "https://cdn.shopify.com/s/files/1/0654/5827/4526/files/Profile_avatar_placeholder_large_525940b5-25d4-4055-a0c7-4d640072c46b.png?v=1740782793";
        }
        imageEl.style.display = "block";
  
        // Show full description if available
        if (data.description) {
          descriptionEl.innerHTML = `<p>${data.description}</p>`;
        } else {
          descriptionEl.innerHTML = "";
        }
  
        // Combine badges for recommended and emergency services
        let badgesHTML = "";
        // Check for either recommended or recommendedByPM property
        if (data.recommended === true || data.recommendedByPM === true) {
          badgesHTML += `<span class="badge recommended">Recommended by Plumbing Market</span>`;
        }
        if (data.emergencyServices === true) {
          badgesHTML += `<span class="badge emergency">Emergency Services</span>`;
        }
        if (badgesHTML) {
          badgesEl.innerHTML = badgesHTML;
          badgesEl.style.display = "block";
        } else {
          badgesEl.style.display = "none";
        }
  
        // Calculate overall rating from comments and total comment count
        const avgCommentRating = computeAverageCommentRating(data.comments);
        const totalComments = data.comments ? data.comments.length : 0;
        if (avgCommentRating !== null) {
          ratingEl.innerHTML = `${generateStars(avgCommentRating)} <span>(${avgCommentRating} out of 5 based on ${totalComments} comments)</span>`;
        } else {
          ratingEl.innerHTML = "";
        }
  
        // Display comments if any (sorted newest first)
        if (data.comments && data.comments.length > 0) {
          commentsEl.innerHTML = "";
          const sortedComments = data.comments.sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0));
          sortedComments.forEach(comment => {
            // Only display comments that have a rating (optional)
            if (!comment.rating) return;
            const commentDate = comment.timestamp ? new Date(comment.timestamp).toLocaleString() : "";
            const commentDiv = document.createElement("div");
            commentDiv.className = "comment-item";
            commentDiv.innerHTML = `
              <div class="comment-header">
                <div class="comment-user">
                  <strong>${comment.customerName}</strong><br>
                  <em>${commentDate}</em>
                </div>
                <div class="comment-rating">
                  ${generateStars(comment.rating)}
                </div>
              </div>
              <div class="comment-body">
                <p>${comment.text}</p>
              </div>
            `;
            commentsEl.appendChild(commentDiv);
          });
          if (commentsEl.innerHTML.trim() === "") {
            commentsEl.innerHTML = "<p>No comments with ratings yet.</p>";
          }
        } else {
          commentsEl.innerHTML = "<p>No comments yet.</p>";
        }
      } else {
        document.getElementById('contractor-detail').innerHTML = '<p class="no-contractor">Contractor not found.</p>';
      }
    } catch (error) {
      console.error("Error loading contractor:", error);
      document.getElementById('contractor-detail').innerHTML = '<p class="no-contractor">Error loading contractor details.</p>';
    }
  }
  
  loadContractor();
  
  // Initialize interactive star rating widget for the comment form
  function initRatingWidget() {
    const totalStars = 5;
    let currentRating = 0;
    ratingWidgetEl.innerHTML = "";
    for (let i = 1; i <= totalStars; i++) {
      const star = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      star.setAttribute("viewBox", "0 0 24 24");
      star.classList.add("rating-star");
      star.dataset.value = i;
      star.innerHTML = `<path d="M12 .587l3.668 7.431 8.2 1.193-5.934 5.787 1.402 8.182L12 18.897l-7.336 3.863 1.402-8.182L.132 9.211l8.2-1.193z"/>`;
      star.addEventListener("click", function() {
        currentRating = parseInt(this.dataset.value);
        updateRatingDisplay(currentRating);
      });
      star.addEventListener("mouseover", function() {
        updateRatingDisplay(parseInt(this.dataset.value));
      });
      star.addEventListener("mouseout", function() {
        updateRatingDisplay(currentRating);
      });
      ratingWidgetEl.appendChild(star);
    }
    commentRatingInput.value = currentRating;
  }
  
  function updateRatingDisplay(rating) {
    const stars = ratingWidgetEl.querySelectorAll(".rating-star");
    stars.forEach(star => {
      if (parseInt(star.dataset.value) <= rating) {
        star.classList.add("filled");
      } else {
        star.classList.remove("filled");
      }
    });
    commentRatingInput.value = rating;
  }
  
  initRatingWidget();
  
  // Handle comment submission
commentForm.addEventListener("submit", async function (e) {
    e.preventDefault();
    const customerName = commentNameInput.value.trim();
    const commentText = commentTextInput.value.trim();
    const ratingValue = parseFloat(commentRatingInput.value);

    if (!customerName || !commentText || isNaN(ratingValue) || ratingValue < 1 || ratingValue > 5) {
        commentErrorEl.textContent = "Please fill in all fields and provide a valid rating (1-5).";
        return;
    }

      const recaptchaResponse = grecaptcha.getResponse();
    if (!recaptchaResponse) {
        commentErrorEl.textContent = "Please complete the reCAPTCHA.";
        return;
    }


    // Request Storage Access if needed (only in browsers that support it)
    if (document.hasStorageAccess) {
        try {
            await document.requestStorageAccess();
            console.log("Storage access granted. Proceeding with Firestore update.");
        } catch (error) {
            console.warn("Storage access denied.");
            commentErrorEl.textContent = "We need third-party cookie access to post comments. Please enable cookies and try again.";
            return; // Stop execution if access is denied
        }
    }

    const newComment = {
        customerName: customerName,
        text: commentText,
        rating: ratingValue,
        timestamp: new Date().getTime()
    };

    try {
        const docRef = doc(db, "contractors", contractorId);
        await updateDoc(docRef, {
            comments: arrayUnion(newComment)
        });

        // Success: Reset form and reload comments
        commentForm.reset();
        commentErrorEl.textContent = "";
        initRatingWidget(); // Reset rating widget
        loadContractor();   // Reload contractor details to show new comment
grecaptcha.reset();
    } catch (error) {
        console.error("Error adding comment:", error);
      grecaptcha.reset(); 
        commentErrorEl.textContent = "Error submitting comment. Please try again later.";
    }
});

  // Helper: Generate star rating SVG for display
  function generateStars(avgRating) {
    const rounded = Math.round(avgRating);
    let starsHTML = `<div class="star-rating">`;
    for (let i = 1; i <= 5; i++) {
      if (i <= rounded) {
        starsHTML += `<svg xmlns="http://www.w3.org/2000/svg" fill="#f39c12" viewBox="0 0 24 24">
            <path d="M12 .587l3.668 7.431 8.2 1.193-5.934 5.787 1.402 8.182L12 18.897l-7.336 3.863 1.402-8.182L.132 9.211l8.2-1.193z"/>
          </svg>`;
      } else {
        starsHTML += `<svg xmlns="http://www.w3.org/2000/svg" fill="none" stroke="#f39c12" stroke-width="2" viewBox="0 0 24 24">
            <path d="M12 .587l3.668 7.431 8.2 1.193-5.934 5.787 1.402 8.182L12 18.897l-7.336 3.863 1.402-8.182L.132 9.211l8.2-1.193z"/>
          </svg>`;
      }
    }
    starsHTML += `</div>`;
    return starsHTML;
  }
</script>
  
{% schema %}
{
  "name": "Contractor Detail",
  "settings": [],
  "presets": [
    {
      "name": "Contractor Detail"
    }
  ]
}
{% endschema %}